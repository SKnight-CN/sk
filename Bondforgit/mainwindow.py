# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import math
import os
import time

from WindPy import w
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QAbstractTableModel, Qt
from PyQt5.QtWidgets import QDialog, QHeaderView
import pandas as pd
import calender
import f1_1_2
import f1_2_2
import get_email
import tips


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1122, 846)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.tableView = QtWidgets.QTableView(self.centralwidget)
        self.tableView.setStyleSheet("")
        self.tableView.setObjectName("tableView")
        self.verticalLayout.addWidget(self.tableView)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1122, 26))
        self.menubar.setObjectName("menubar")
        self.first = QtWidgets.QMenu(self.menubar)
        self.first.setObjectName("first")
        self.f1_1 = QtWidgets.QMenu(self.first)
        self.f1_1.setObjectName("f1_1")
        self.f1_2 = QtWidgets.QMenu(self.first)
        self.f1_2.setObjectName("f1_2")
        self.f1_3 = QtWidgets.QMenu(self.first)
        self.f1_3.setObjectName("f1_3")
        self.second = QtWidgets.QMenu(self.menubar)
        self.second.setObjectName("second")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.f1_1_1 = QtWidgets.QAction(MainWindow)
        self.f1_1_1.setObjectName("f1_1_1")
        self.f1_1_2 = QtWidgets.QAction(MainWindow)
        self.f1_1_2.setObjectName("f1_1_2")
        self.f1_1_3 = QtWidgets.QAction(MainWindow)
        self.f1_1_3.setObjectName("f1_1_3")
        self.f1_2_1 = QtWidgets.QAction(MainWindow)
        self.f1_2_1.setObjectName("f1_2_1")
        self.f1_2_2 = QtWidgets.QAction(MainWindow)
        self.f1_2_2.setObjectName("f1_2_2")
        self.f1_3_1 = QtWidgets.QAction(MainWindow)
        self.f1_3_1.setObjectName("f1_3_1")
        self.f1_3_2 = QtWidgets.QAction(MainWindow)
        self.f1_3_2.setObjectName("f1_3_2")
        self.f1_3_3 = QtWidgets.QAction(MainWindow)
        self.f1_3_3.setObjectName("f1_3_3")
        self.f1_3_4 = QtWidgets.QAction(MainWindow)
        self.f1_3_4.setObjectName("f1_3_4")
        self.f2_1_1 = QtWidgets.QAction(MainWindow)
        self.f2_1_1.setObjectName("f2_1_1")
        self.f2_1_2 = QtWidgets.QAction(MainWindow)
        self.f2_1_2.setObjectName("f2_1_2")
        self.f2_2_1 = QtWidgets.QAction(MainWindow)
        self.f2_2_1.setObjectName("f2_2_1")
        self.f1_1.addAction(self.f1_1_1)
        self.f1_1.addSeparator()
        self.f1_1.addAction(self.f1_1_2)
        self.f1_1.addSeparator()
        self.f1_1.addAction(self.f1_1_3)
        self.f1_2.addAction(self.f1_2_1)
        self.f1_2.addSeparator()
        self.f1_2.addAction(self.f1_2_2)
        self.f1_3.addAction(self.f1_3_1)
        self.f1_3.addSeparator()
        self.f1_3.addAction(self.f1_3_2)
        self.f1_3.addSeparator()
        self.f1_3.addAction(self.f1_3_3)
        self.f1_3.addSeparator()
        self.f1_3.addAction(self.f1_3_4)
        self.first.addAction(self.f1_1.menuAction())
        self.first.addSeparator()
        self.first.addAction(self.f1_2.menuAction())
        self.first.addSeparator()
        self.first.addAction(self.f1_3.menuAction())
        self.second.addAction(self.f2_1_1)
        self.second.addSeparator()
        self.second.addAction(self.f2_1_2)
        self.second.addSeparator()
        self.second.addAction(self.f2_2_1)
        self.menubar.addAction(self.first.menuAction())
        self.menubar.addAction(self.second.menuAction())

        self.f1_1_1.triggered.connect(self.display_1_1)
        self.f1_1_2.triggered.connect(self.luru_f1_1)
        self.f1_1_3.triggered.connect(self.update_by_email_1)
        self.f1_2_1.triggered.connect(self.display_1_2)
        self.f1_2_2.triggered.connect(self.luru_f1_2)
        self.f1_3_1.triggered.connect(self.getdate_1_3_1)
        self.f1_3_2.triggered.connect(self.chanpinjueduishouyi_1_3_2)
        self.f1_3_3.triggered.connect(self.danzhijueduishouyi_1_3_3)
        self.f1_3_4.triggered.connect(self.tuichubiao_1_3_4)
        self.f2_1_1.triggered.connect(self.updatebonds_2_1_1)
        self.f2_1_2.triggered.connect(self.shichanggenzong_2_1_2)
        #self.f2_2_1.triggered.connect(self.ruchizhaigenzong_2_2_1)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.first.setTitle(_translate("MainWindow", "产品基本信息"))
        self.f1_1.setTitle(_translate("MainWindow", "手录产品"))
        self.f1_2.setTitle(_translate("MainWindow", "入池债"))
        self.f1_3.setTitle(_translate("MainWindow", "产品绝对收益率"))
        self.second.setTitle(_translate("MainWindow", "市场追踪"))
        self.f1_1_1.setText(_translate("MainWindow", "显示产品"))
        self.f1_1_2.setText(_translate("MainWindow", "手动录入"))
        self.f1_1_3.setText(_translate("MainWindow", "邮件抓取"))
        self.f1_2_1.setText(_translate("MainWindow", "显示入池债"))
        self.f1_2_2.setText(_translate("MainWindow", "手动录入"))
        self.f1_3_1.setText(_translate("MainWindow", "选择日期"))
        self.f1_3_2.setText(_translate("MainWindow", "产品收益率"))
        self.f1_3_3.setText(_translate("MainWindow", "单券收益率"))
        self.f1_3_4.setText(_translate("MainWindow", "退出标"))
        self.f2_1_1.setText(_translate("MainWindow", "更新近一月内发行债券"))
        self.f2_1_2.setText(_translate("MainWindow", "市场跟踪表"))
        self.f2_2_1.setText(_translate("MainWindow", "入池债跟踪"))


    class PdTable(QAbstractTableModel):
        def __init__(self, data):
            QAbstractTableModel.__init__(self)
            self._data = data

        def rowCount(self, parent=None):
            return self._data.shape[0]

        def columnCount(self, parent=None):
            return self._data.shape[1]

        # 显示数据
        def data(self, index, role=Qt.DisplayRole):
            if index.isValid():
                if role == Qt.DisplayRole:
                    return str(self._data.iloc[index.row(), index.column()])
            return None

        # 显示行和列头
        def headerData(self, col, orientation, role):
            if orientation == Qt.Horizontal and role == Qt.DisplayRole:
                return self._data.columns[col]
            elif orientation == Qt.Vertical and role == Qt.DisplayRole:
                return self._data.axes[0][col]
            return None

    # 显示产品列表
    def display_1_1(self):
        # fileDevice = QFile("testproduc.csv")
        # if not fileDevice.exists():  # 判断文件是否存在
        #     return False
        #
        # if not fileDevice.open(QIODevice.ReadOnly | QIODevice.Text):
        #     return False
        #
        # try:
        #     self.textBrowser.clear()
        #     while not fileDevice.atEnd():
        #         qtBytes = fileDevice.readLine()
        #         pyBytes = bytes(qtBytes.data())
        #         lineStr = pyBytes.decode("utf-8")
        #         lineStr = lineStr.strip()
        #         self.textBrowser.append(lineStr)
        # finally:
        #     fileDevice.close()
        # return True
        dataset = pd.read_csv("products.csv")
        model = self.PdTable(dataset)
        self.tableView.setStyleSheet("QTableCornerButton::section{background-color:rgb(245,245,245);}")
        # self.tableView.setStyleSheet("::section{color:yellow}")
        self.tableView.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeToContents)
        self.tableView.horizontalHeader().setStyleSheet(
            "::section{background-color:rgb(245,245,245);font:11pt '宋体';color: rgb(100,149,237);}")
        self.tableView.verticalHeader().setSectionResizeMode(QHeaderView.Fixed)
        self.tableView.verticalHeader().setStyleSheet(
            "::section{background-color:rgb(245,245,245);font:11pt '宋体';color: rgb(100,149,237);}")
        self.tableView.setModel(model)
    # 显示产品列表

    # 手动录入产品
    def luru_f1_1(self):
        self.di = QDialog()
        self.d = f1_1_2.Ui_Dialog()
        self.d.setupUi(self.di)
        #self.di.setWindowModality(Qt.ApplicationModal)
        self.di.show()
        self.display_1_1()
    # 手动录入产品

    # 邮件更新
    def update_by_email_1(self):
        get_email.connect_email_by_pop3()
        # 一次性读取整个文件夹
        # timer = 1
        # file_dir = "F:\\programs\\python_codes\\CIC2018"  # file directory
        # all_csv_list = os.listdir(file_dir)  # get csv list
        # for single_csv in all_csv_list:
        #    single_data_frame = pd.read_csv(os.path.join(file_dir, single_csv))
        #     print(single_data_frame.info())
        #    if single_csv == all_csv_list[0]:
        #        dataset = single_data_frame
        #    else:  # concatenate all csv to a single dataframe, ingore index
        #        dataset = pd.concat([dataset, single_data_frame], ignore_index=True)
        #    print(timer)
        #    timer+=1

        dataset = pd.read_csv('./emails/')
        df = pd.read_csv("products.csv")
        mergedData = pd.concat([dataset, df], axis=0, ignore_index=True)
        nonedupli = mergedData.drop_duplicates(subset=['基金产品'], keep='last')
        nonedupli.to_csv("testproduc.csv", index=0, encoding='utf_8_sig')
    # 邮件更新

    # 手动录入入池主体
    def luru_f1_2(self):
        self.di = QtWidgets.QWidget()
        self.d = f1_2_2.Ui_Form()
        self.d.setupUi(self.di)
        #self.di.setWindowModality(Qt.ApplicationModal)
        self.di.show()
    # 手动录入入池主体

    # 显示入池列表
    def display_1_2(self):
        # fileDevice = QFile("testproduc.csv")
        # if not fileDevice.exists():  # 判断文件是否存在
        #     return False
        #
        # if not fileDevice.open(QIODevice.ReadOnly | QIODevice.Text):
        #     return False
        #
        # try:
        #     self.textBrowser.clear()
        #     while not fileDevice.atEnd():
        #         qtBytes = fileDevice.readLine()
        #         pyBytes = bytes(qtBytes.data())
        #         lineStr = pyBytes.decode("utf-8")
        #         lineStr = lineStr.strip()
        #         self.textBrowser.append(lineStr)
        # finally:
        #     fileDevice.close()
        # return True
        dataset = pd.read_excel("入池债.xlsx")
        model = self.PdTable(dataset)
        self.tableView.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeToContents)
        self.tableView.verticalHeader().setSectionResizeMode(QHeaderView.Fixed)
        self.tableView.setModel(model)
    # 显示入池列表

    #计算绝对收益率
    # 计算绝对收益率
    # 计算绝对收益率
    jueduishouyi = pd.DataFrame(columns=('产品名称', '绝对收益率', '产品估值'))
    chanpinshouyi = pd.DataFrame(columns=('证券名称', '产品名称', '绝对收益率'))
    tuichubiao = pd.DataFrame(columns=('退出标', '涉及产品', '退出标实现的实现收益', '退出时间'))
    def merge_duizhang(self):
        duizhangdan = pd.DataFrame(pd.read_excel("对账单集合.xlsx"))
        date = duizhangdan.loc[0, "对账单合集"]
        # print(date)
        tag = 0
        file_dir = ".\\lists"  # file directory
        target = "对账单"
        all_csv_list = os.listdir(file_dir)  # get csv list
        latest = date
        for single_csv in all_csv_list:
            tag = 0
            if target in single_csv:
                filename = single_csv
                dataset = pd.DataFrame(pd.read_excel(file_dir + "\\" + filename))
                # print(dataset.loc[2,"Unnamed: 1"])
                if (int(dataset.loc[2, "Unnamed: 1"]) < date):
                    continue
                if (int(dataset.loc[2, "Unnamed: 1"]) > latest):
                    latest = int(dataset.loc[2, "Unnamed: 1"])
                for index, row in dataset.iterrows():
                    if row[0] == "期初余额":
                        tag = index + 1
                while dataset.loc[tag, "Unnamed: 1"] != "证券代码":
                    if dataset.loc[tag, "Unnamed: 1"] == "证券买入" or dataset.loc[tag, "Unnamed: 1"] == "证券卖出":
                        tmp = []
                        tmp.append(dataset.loc[tag, "资金对账单（人民币）"])
                        tmp.append(dataset.loc[tag, "Unnamed: 1"])
                        tmp.append(dataset.loc[tag, "Unnamed: 3"])
                        tmp.append(dataset.loc[tag, "Unnamed: 4"])
                        tmp.append(dataset.loc[tag, "Unnamed: 5"])
                        tmp.append(dataset.loc[tag, "Unnamed: 6"])
                        tmp.append(dataset.loc[tag, "Unnamed: 8"])
                        # dataframe拼接
                        b = pd.DataFrame(tmp).T
                        b.columns = duizhangdan.columns
                        duizhangdan = pd.concat([duizhangdan, b])
                        # dataframe拼接
                    tag += 1
        duizhangdan.loc[0, "对账单合集"] = latest
        duizhangdan.to_excel("对账单集合.xlsx", index=False, header=True)
        return duizhangdan

    # 计算单支债券绝对收益
    def bond_gain(self,bond, duizhangdan, code,proname):
        tuichubiao = pd.DataFrame(columns=('退出标', '涉及产品', '退出标实现的实现收益','退出时间'))
        sum_gain = 0
        sum_pay = 0
        hold_num = 0
        jiaquanchengben = 0
        buy_times = 0
        sum_payback = 0
        for index, row in duizhangdan.iterrows():
            if bond == row["Unnamed: 3"]:
                tradedate = "tradeDate=" + str(row["对账单合集"])
                if row["Unnamed: 1"] == "证券买入":
                    buy_times += 1
                    inf = (w.wss(code, "couponrate3,ptmyear,termifexercise", tradedate)).Data
                    # print(inf)
                    lilv = float(''.join([str(x) for x in inf[0]])) / 100
                    rest_date = float(''.join([str(x) for x in inf[1]]))
                    xingquan = float(''.join([str(x) for x in inf[2]]))
                    # 判断行权期限是不是空
                    if xingquan != xingquan:
                        times = math.ceil(rest_date)
                    else:
                        times = math.ceil(xingquan)
                    payback = 100 * (1 + lilv * times)
                    absgain_per = payback / float(abs(float(row["Unnamed: 6"])) / int(row["Unnamed: 4"])) - 1
                    absgain = absgain_per * abs(float(row["Unnamed: 6"]))
                    sum_gain += absgain
                    sum_pay += abs(float(row["Unnamed: 6"]))
                    hold_num += int(row["Unnamed: 4"])
                    sum_payback += payback
                    if jiaquanchengben == 0:
                        jiaquanchengben = float(sum_pay / hold_num)
                    else:
                        jiaquanchengben = (abs(float(row["Unnamed: 6"])) + jiaquanchengben * (
                                hold_num - int(row["Unnamed: 4"]))) / hold_num
                elif row["Unnamed: 1"] == "证券卖出":
                    quanjia = float(abs(float(row["Unnamed: 6"]))/int(row["Unnamed: 4"]))
                    absgain_per = quanjia/jiaquanchengben-1
                    tuichushouyi = jiaquanchengben*int(row["Unnamed: 4"])*absgain_per
                    tuichubiao = tuichubiao.append(
                        pd.DataFrame({'退出标': [bond], '涉及产品': [proname], '退出标实现的实现收益': [tuichushouyi],'退出时间':[row["对账单合集"]]}),
                        ignore_index=True
                    )
                    sum_gain -= ((sum_payback / buy_times - jiaquanchengben) * int(row["Unnamed: 4"]))
                    hold_num -= int(row["Unnamed: 4"])
        return sum_gain,jiaquanchengben,hold_num,tuichubiao

    def getdate_1_3_1(self):
        self.jueduishouyi.drop(self.jueduishouyi.index, inplace=True)
        self.chanpinshouyi.drop(self.chanpinshouyi.index, inplace=True)
        self.tuichubiao.drop(self.tuichubiao.index, inplace=True)
        self.di = QtWidgets.QWidget()
        self.d = calender.Ui_calender()
        self.d.signal_1.connect(self.jueduishouyilv)
        self.d.setupUi(self.di)
        # self.di.setWindowModality(Qt.ApplicationModal)
        self.di.show()

    def jueduishouyilv(self,date):
        chart = "估值表_" + date
        file_dir = ".\\lists"  # file directory
        all_csv_list = os.listdir(file_dir)  # get csv list
        for single_csv in all_csv_list:
            if chart in single_csv:
                filename = single_csv
                # 将所有债券名称存到bonds中
                # print(single_csv)
                dataset = pd.DataFrame(pd.read_excel(file_dir + "\\" + filename))
                product_gain = 0
                shishouziben = 0
                guzhi = 0
                bonds = []
                wenxin = ''
                for index, row in dataset.iterrows():
                    # 找出债券名称
                    if str(row[0])[-2:] == 'SH' or str(row[0])[-2:] == 'SZ' or str(row[0])[-2:] == 'IB' and str(row[0])[
                        -9] != '6' and not (row[14] != row[14]):
                        bonds.append(row[1])
                    # 找出稳鑫表
                    elif "OTC" in str(row[0]):
                        wenxin = row[1]
                    elif str(row[0]) == "实收资本":
                        shishouziben = float(row[6])
                    elif str(row[0]) == "今日单位净值":
                        guzhi = float(row[1])
                # print(bonds)
                # 得到稳鑫表名
                temp = list(wenxin)
                temp.pop(-1)
                temp.pop(-3)
                temp.pop(-3)
                temp.pop(-11)
                temp.pop(-11)
                temp.pop(-11)
                temp.pop(-11)
                wenxin = ''.join(temp)
                wenxinname = wenxin + '_' + '[' + date[0:4] + '-' + date[4:6] + '-' + date[6:8] + ']'
                # print(wenxinname)
                for single_csv1 in all_csv_list:
                    if wenxin in single_csv1:
                        filename = single_csv1
                        break

                # 读取温馨表
                dataset = pd.DataFrame(pd.read_excel(file_dir + "\\" + filename))
                for index, row in dataset.iterrows():
                    # 找出债券名称
                    if len(str(row[0])) == 14:
                        # print(row)
                        if (row[1][0] >= '0' and row[1][0] <= '9'):
                            bonds.append(row[1])
                # 去除重复债券,all_bonds为债券名字集合
                all_bonds = sorted(set(bonds), key=bonds.index)
                #print(all_bonds)

                # 读取所有对账单
                duizhangdan = self.merge_duizhang()
                # print(duizhangdan)

                # 遍历债券
                #w.start()
                # 从wind提取所有债券名称和代码
                # everything = (w.wset("sectorconstituent","date=2021-06-07;sectorid=a101010801000000;field=wind_code,sec_name")).Data
                everything = pd.read_excel("bonds.xlsx")
                tag1 = 0
                tag2 = 0
                while filename[tag1] != '_':
                    tag1 += 1
                tag2 = tag1 + 1
                while filename[tag2] != '_':
                    tag2 += 1
                proname = filename[tag1 + 1:tag2]
                for bond in all_bonds:
                    for index, row in everything.iterrows():
                        if row[1] == bond:
                            #print(row)
                            code = row[0]
                            gain,jiaquanchengben,hold_num,chanpintuichubiao = self.bond_gain(bond, duizhangdan, code,proname)
                            self.tuichubiao = self.tuichubiao.append(chanpintuichubiao,ignore_index=True)
                            if (hold_num!=0 and jiaquanchengben!=0):
                                chanpinshouyilv = float(gain/(jiaquanchengben*hold_num))
                                self.chanpinshouyi = self.chanpinshouyi.append(
                                    pd.DataFrame({'证券名称': [bond], '产品名称': [proname], '绝对收益率': [chanpinshouyilv]}),
                                ignore_index=True)
                            product_gain += gain
                            break
                    # 计算产品绝对收益
                product_gainper = product_gain / shishouziben
                self.jueduishouyi = self.jueduishouyi.append(
                    pd.DataFrame(
                        {'产品名称': [proname], '绝对收益率': [product_gainper], '产品估值': [guzhi]}),
                    ignore_index=True)

    def chanpinjueduishouyi_1_3_2(self):
        model = self.PdTable(self.jueduishouyi)
        self.tableView.setStyleSheet("QTableCornerButton::section{background-color:rgb(245,245,245);}")
        # self.tableView.setStyleSheet("::section{color:yellow}")
        self.tableView.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeToContents)
        self.tableView.horizontalHeader().setStyleSheet(
            "::section{background-color:rgb(245,245,245);font:11pt '宋体';color: rgb(100,149,237);}")
        self.tableView.verticalHeader().setSectionResizeMode(QHeaderView.Fixed)
        self.tableView.verticalHeader().setStyleSheet(
            "::section{background-color:rgb(245,245,245);font:11pt '宋体';color: rgb(100,149,237);}")
        self.tableView.setModel(model)

    def danzhijueduishouyi_1_3_3(self):
        model = self.PdTable(self.chanpinshouyi)
        self.tableView.setStyleSheet("QTableCornerButton::section{background-color:rgb(245,245,245);}")
        # self.tableView.setStyleSheet("::section{color:yellow}")
        self.tableView.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeToContents)
        self.tableView.horizontalHeader().setStyleSheet(
            "::section{background-color:rgb(245,245,245);font:11pt '宋体';color: rgb(100,149,237);}")
        self.tableView.verticalHeader().setSectionResizeMode(QHeaderView.Fixed)
        self.tableView.verticalHeader().setStyleSheet(
            "::section{background-color:rgb(245,245,245);font:11pt '宋体';color: rgb(100,149,237);}")
        self.tableView.setModel(model)

    def tuichubiao_1_3_4(self):
        model = self.PdTable(self.tuichubiao)
        self.tableView.setStyleSheet("QTableCornerButton::section{background-color:rgb(245,245,245);}")
        # self.tableView.setStyleSheet("::section{color:yellow}")
        self.tableView.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeToContents)
        self.tableView.horizontalHeader().setStyleSheet(
            "::section{background-color:rgb(245,245,245);font:11pt '宋体';color: rgb(100,149,237);}")
        self.tableView.verticalHeader().setSectionResizeMode(QHeaderView.Fixed)
        self.tableView.verticalHeader().setStyleSheet(
            "::section{background-color:rgb(245,245,245);font:11pt '宋体';color: rgb(100,149,237);}")
        self.tableView.setModel(model)
    # 计算绝对收益率
    # 计算绝对收益率
    # 计算绝对收益率

    def updatebonds_2_1_1(self):
        everything = pd.read_excel("bonds.xlsx")
        date = "date=" + str(
            time.strftime("%Y-%m-%d", time.localtime())) + ";sectorid=1000008620000000;field=wind_code,sec_name"
        # 从wind提取一个月内上市得债券
        inf = w.wset("sectorconstituent", date)
        if inf.ErrorCode != 0:
            print("errrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrror")
        new_bonds_codes = inf.Data[0]
        new_bonds_names = inf.Data[1]
        i = 0
        for index, bondcode in enumerate(new_bonds_codes):
            daoqiri = (w.wss(bondcode, "maturitydate").Data)[0]
            daoqidate = str(daoqiri[0].year) + '-' + str(daoqiri[0].month) + '-' + str(daoqiri[0].day)
            everything = everything.append(
                pd.DataFrame({'证券代码': [bondcode], '证券简称': [new_bonds_names[index]], '到期日期': [daoqidate]}),
                ignore_index=True)
        # 去重
        everything.drop_duplicates(subset='证券代码', keep='last', inplace=True)
        # 按到期日近到远排序
        # print("start sort")
        # everything.sort_values('到期日期', inplace=True)
        everything.to_excel("bonds.xlsx", index=False, header=True)

    def find_product(self,tradeplace, shichang):
        date = str(int(time.strftime("%Y%m%d", time.localtime())) - 1)
        tradedates = "tradeDate=" + str(date) + ";date=" + str(date) + ";type=All;cycle=D"
        for index, row in tradeplace.iterrows():
            # YTM_ifexe-行权收益率,dirtyprice-收盘全价,nxoptiondate-下一行权日,volume-成交量,amt-成交额,latestpar-债券最新面值，couponrate3-票面利率，pymyear-剩余年限
            # termifexericse-行权剩余年限
            # w.wss(row[0], "YTM_ifexe,dirtyprice,nxoptiondate,volume,amt,latestpar,couponrate3,ptmyear,termifexercise"
            #      , "tradeDate=20210605;date=20210604;type=C;cycle=D")
            tag = 0
            inf = (w.wss(row[0],
                         "YTM_ifexe,dirtyprice,nxoptiondate,volume,amt,fund_parvalue,couponrate2,ptmyear,termifexercise",
                         tradedates)).Data
            xingquanshouyi = float(''.join([str(x) for x in inf[0]]))
            shoupanquanjia = float(''.join([str(x) for x in inf[1]]))
            xingquanri = float(''.join([str(x) for x in inf[2]]))
            chengjiaoliang = float(''.join([str(x) for x in inf[3]]))
            chengjiaoe = float(''.join([str(x) for x in inf[4]]))
            mianzhi = float(''.join([str(x) for x in inf[5]]))
            piaomianlilv = float(''.join([str(x) for x in inf[6]]))
            rest_date = float(''.join([str(x) for x in inf[7]]))
            xingquan = float(''.join([str(x) for x in inf[8]]))
            # 判断行权收益或者绝对收益大于10
            print(xingquan)
            print(row[1])
            print(row[0])
            print(rest_date)
            if math.isnan(xingquan):
                times = math.ceil(rest_date)
            else:
                times = math.ceil(xingquan)
            jueduishouyi = ((piaomianlilv * times + mianzhi) / shoupanquanjia - 1) * 100
            if math.isnan(xingquanshouyi):
                if xingquanshouyi > 10:
                    tag = 1
            if not tag:
                if jueduishouyi > 10:
                    tag = 1
            if tag:
                print(inf)
                print(jueduishouyi)
                date = list(((w.wss(row[0], "nxoptiondate", tradedates)).Data)[0])
                if date[0] != None:
                    date = list(date[0])
                    date[4] = ''
                    date[7] = ''
                    date = ''.join(date)
                else:
                    date = 0
                shichang = shichang.append(
                    pd.DataFrame(
                        {'证券代码': [row[0]], '证券简称': [row[1]], '公司名称': [((w.wss(row[0], "comp_name")).Data)[0][0]],
                         '行权收益率': [xingquanshouyi]
                            , '绝对收益率': [jueduishouyi], '成交价格': [chengjiaoe], '成交量': [chengjiaoliang],
                         '全价': [shoupanquanjia], '行权日': [date]}),
                    ignore_index=True)

    def shichanggenzong_2_1_2(self):
        everything = pd.read_excel("bonds.xlsx")
        shichang = pd.DataFrame(columns=('证券代码', '证券简称', '公司名称', '行权收益率', '绝对收益率', '成交价格', '成交量', '全价', '行权日'))
        self.find_product(everything, shichang)
        shichang.to_excel("市场跟踪.xlsx", index=False, header=True)
        #临时表，每次运行维护一次


